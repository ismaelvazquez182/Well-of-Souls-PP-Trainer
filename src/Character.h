#pragma once

enum Types {
	SWORD_USER = 0,
	MAGIC_USER = 1,
	BOW_USER = 2,
	MUSIC_USER = 3,
	FIST_USER = 4,
	DART_USER = 5,
	BOOK_USER = 6,
	SPIRIT_USER = 7,
	XTREME = 8,
	BEGGAR = 9,
	SCAVENGER = 10,
	PIANO_USER = 87
};

class Character
{
public:
	char pad_0x0000[0x4]; //0x0000
	__int32 SoulID; //0x0004 
	char pad_0x0008[0x4]; //0x0008
	__int32 N0000004C; //0x000C 
	__int32 SceneID; //0x0010 
	char CharacterName[32]; //0x957888 
	char Skin[32]; //0x957888 
	char pad_0x0054[0x4]; //0x0054
	__int32 N00000249; //0x0058 
	char pad_0x005C[0x4]; //0x005C
	__int32 Type; //0x0060 
	__int32 Level; //0x0064 
	__int32 CurrentXP; //0x0068 
	__int32 GoldPieces; //0x006C 
	__int32 Health; //0x0070 
	__int32 MaxHealth; //0x0074 
	__int32 MagicPoints; //0x0078 
	__int32 MaxMagicPoints; //0x007C 
	__int32 ItemDefense; //0x0080 
	__int32 ItemAttack; //0x0084 
	__int32 SkinDirectionOnMap; //0x0088 
	char pad_0x008C[0x4]; //0x008C
	__int32 Location; //0x0090 
	__int32 y; //0x0094 
	__int32 x; //0x0098 
	__int32 yTarget; //0x009C 
	__int32 xTarget; //0x00A0 
	__int32 yDistance; //0x00A4 
	__int32 xDistance; //0x00A8 
	__int32 N00000234; //0x00AC 
	char pad_0x00B0[0xC]; //0x00B0
	__int32 yClicked; //0x00BC 
	__int32 xClicked; //0x00C0 
	__int32 yEvergreen; //0x00C4 
	__int32 xEvergreen; //0x00C8 
	char pad_0x00CC[0x8]; //0x00CC
	char World[32]; //0x957888 
	char pad_0x00F4[0xE4]; //0x00F4
	__int32 HelmetItem; //0x01D8 
	__int32 TorsoItem; //0x01DC 
	char pad_0x01E0[0x10]; //0x01E0
	__int32 HandItem; //0x01F0 
	char pad_0x01F4[0xC]; //0x01F4
	__int32 BootItem; //0x0200 
	__int32 ShieldItem; //0x0204 
	__int32 RingItem; //0x0208 
	__int32 AmuletItem; //0x020C 
	__int32 Spells[18]; //0x0210 
	__int32 Items[262]; //0x0258 
	char pad_0x0670[0x10]; //0x0670
	__int32 Strength; //0x0680 
	__int32 Wisdom; //0x0684 
	__int32 Stamina; //0x0688 
	__int32 Agility; //0x068C 
	__int32 Dexterity; //0x0690 
	__int32 PercentMagic; //0x0694 
	__int32 isPKer; //0x0698 
	__int32 PP; //0x069C 
	char pad_0x06A0[0x8]; //0x06A0
	__int32 LastPlayedPatch; //0x06A8 
	char pad_0x06AC[0x10]; //0x06AC
	__int32 CheaterStatus; //0x06BC 
	char pad_0x06C0[0x8]; //0x06C0
	__int32 NegativeCurrentXP; //0x06C8 
	__int32 LifeElementSkill; //0x06CC 
	__int32 WaterElementSkill; //0x06D0 
	__int32 NatureElementSkill; //0x06D4 
	__int32 EarthElementSkill; //0x06D8 
	__int32 DeathElementSkill; //0x06DC 
	__int32 FireElementSkill; //0x06E0 
	__int32 SpiritElementSkill; //0x06E4 
	__int32 AirElementSkill; //0x06E8 
	char pad_0x06EC[0x8]; //0x06EC
	__int32 ModsTraveled; //0x06F4 
	__int32 BornTime; //0x06F8
	__int32 SwordHandSkill; //0x06FC 
	__int32 StaffHandSkill; //0x0700 
	__int32 BowHandSkill; //0x0704 
	__int32 MusicHandSkill; //0x0708 
	__int32 FistHandSkill; //0x070C 
	__int32 DartHandSkill; //0x0710 
	__int32 BookHandSkill; //0x0714 
	__int32 SpiritHandSkill; //0x0718 
	__int32 NegativeCheaterStatus; //0x071C 
	char pad_0x0720[0x4]; //0x0720
	__int32 Deaths; //0x0724 
	__int32 Kills; //0x0728 
	char pad_0x072C[0x4]; //0x072C
	__int32 Incarnations; //0x0730 
	__int32 NumHours; //0x0734 
	char pad_0x0738[0x28]; //0x0738
	__int32 NegativePP; //0x0760 
	__int32 BornIn; //0x0764 
	__int32 HerFileCRCFlag; //0x0768 
	char pad_0x076C[0x208]; //0x076C
	__int32 NegativeGoldPieces; //0x0974 
	char pad_0x0978[0x68]; //0x0978
	__int32 PercentHand; //0x09E0 
	char pad_0x09E4[0x4]; //0x09E4
	__int32 Rating; //0x09E8 
	char pad_0x09EC[0x4]; //0x09EC
	__int32 N000003E3; //0x09F0 
	char Guild[4]; //0x957888 
	char pad_0x09F8[0xC]; //0x09F8
	__int32 NumberOfHunts; //0x0A04 
	char pad_0x0A08[0x24]; //0x0A08
	__int32 PlayerKills; //0x0A2C 
	char pad_0x0A30[0x4]; //0x0A30
	__int32 ProgressTowardsHalo; //0x0A34 
	__int32 Bravery; //0x0A38 
	char pad_0x0A3C[0x10]; //0x0A3C
	__int32 BirthSoulID; //0x0A4C 
	char pad_0x0A50[0x4]; //0x0A50
	__int32 NegativeModsTraveled; //0x0A54 
	__int32 ModStatus; //0x0A58 
	__int32 NegativeModStatus; //0x0A5C 
	__int32 NegativeAttack; //0x0A60 
	__int32 NegativeDefense; //0x0A64 
	char pad_0x0A68[0x8]; //0x0A68
	__int32 NegativeLevel; //0x0A70 
	char pad_0x0A74[0x1C]; //0x0A74
	__int32 NegativeProgressTowardsHalo; //0x0A90 
	char pad_0x0A94[0x28]; //0x0A94
	__int32 statsCRC; //0x0ABC 
	char pad_0x0AC0[0x42C]; //0x0AC0
	__int32 CheatIntegrityCheck; //0x0EEC 
	__int32 PPIntegrityCheck; //0x0EF0 
	char pad_0x0EF4[0x7D4]; //0x0EF4
	__int32 CharacterCRC; //0x16C8 

}; //Size=0x16CC

static unsigned int PLAYER_BASE = 0x0067FBF8; 
